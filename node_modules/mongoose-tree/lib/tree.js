
var Schema = require('mongoose').Schema;

module.exports = exports = tree;

function tree(schema, options) {
  var pathSeparator = options && options.pathSeparator || '#';

  schema.add({
    parent : {
      type : Schema.Types.ObjectId,
      set : function(val) {
        if(val && val._id) {
            // console.info("tree plugin中parent节点的类型："+val._id);
          return val._id;
        }
        return val;
      },
      index: true
    },
    path : {
      type : String,
      index: true,
        default: this._id
    }
  });

  schema.pre('save', function(next) {
    var isParentChange = this.isModified('parent');
    // console.info("tree plugin中保存");
      // this.parent='sdfsdfsdfsdf';

    if(!this.parent) {
          this.parent=null;
          this.path = this._id.toString();
          console.info("\ntree plugin中无爹1this.parent:"+this.parent);
          return next();
      }
    if(this.isNew || isParentChange) {

       console.info("\ntree plugin中保存现在爹1this.parent:"+this.parent);

      var self = this;
      this.collection.findOne({ _id : this.parent }, function(err, doc) {
        if(err) return next(err);
          // console.info("tree plugin中查到perent的path2this.path："+this.path+'现在爹的path：'+doc.path );
        var previousPath = this.path;
        self.path = doc.path + pathSeparator + self._id.toString();
          // console.info("tree plugin中保存self.path :"+self.path);
          this.path=self.path+'';

          //如果一个节点的父节点变化了，要更新他所有子节点的路径
        if(isParentChange) {
            console.info("isParentChange\ntree plugin中保存isParentChange之前path :"+previousPath + pathSeparator +'名称：'+ this._id+"现在path："+this.path+"现在parent："+this.parent);
          // When the parent is changed we must rewrite all children paths as well
          self.collection.find({ path : { '$regex' : '^' + previousPath + pathSeparator } }, function(err, cursor) {
              console.info("tree plugin中查到了受影响的子节点："+cursor);
            if(err) return next(err);

              // var newPath = self.path+prePath;
              // console.info("tree plugin中受影响的子节点的新路径dfgdf："+(prePath+'').length);
            var stream = cursor.stream();
            stream.on('data', function (doc) {
                console.info("tree plugin中受影响的子节点的新路径data：\n"+self.path+'\n');
              var newPath =self.path+ (doc.path+'').substr(((previousPath+'').length));//+
              console.info("tree plugin中受影响的子节点的新路径："+newPath+'自己的路径：'+self.path);
              self.collection.update({ _id : doc._id }, { $set : { path : newPath } }, function(err) {
                 console.info("tree plugin中保存newPath"+newPath);
                if(err) return next(err);
              });
            });
              // console.info("tree plugin中保存3");
            stream.on('close', function() {
                // console.info("tree plugin中保存41"+err);
              next();
            });
            stream.on('error', function(err) {
                // console.info("tree plugin中保存42"+err);
              next(err);
            });
          });
        } else {
            // console.info("tree plugin中保存43"+err);
          next();
        }
         console.info("\ntree plugin中保存5self.path :"+self.path);
        this.path=self.path;
          next();
      });
    } else {
      next();
    }
      // console.info("tree plugin中保存6");
  });

  schema.pre('remove', function(next) {
    if(!this.path) {
      return next();
    }
    this.collection.remove({ path : { '$regex' : '^' + this.path + pathSeparator } }, next);
  });

  schema.method('getChildren', function(recursive, cb) {
    if(typeof(recursive) === "function") {
      cb = recursive;
      recursive = false;
    }
    var filter = recursive ? { path : { $regex : '^' + this.path + pathSeparator } } : { parent : this._id };
    return this.model(this.constructor.modelName).find(filter, cb);
  });

  schema.method('getParent', function(cb) {
    return this.model(this.constructor.modelName).findOne({ _id : this.parent }, cb);
  });

  var getAncestors = function(cb) {
    if(this.path) {
      var ids = this.path.split(pathSeparator);
      ids.pop();
    } else {
      var ids = [];
    }
    var filter = { _id : { $in : ids } };
    return this.model(this.constructor.modelName).find(filter, cb);
  };

  schema.method('getAnsestors', getAncestors);
  schema.method('getAncestors', getAncestors);

    schema.method('getLevel', function() {
        return this.path ? this.path.split(pathSeparator).length : 0;
    });


  // schema.virtual('level').get(function() {
  //   return this.path ? this.path.split(pathSeparator).length : 0;
  // });
}
